{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"robot-markdown","text":"<p>Convert RobotFramework output XML to markdown</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>:</p> <pre><code>pip install robot-markdown\n</code></pre> <p>With <code>pipx</code>:</p> <pre><code>python3 -m pip install --user pipx\npipx install robot-markdown\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#020-2024-02-12","title":"0.2.0 - 2024-02-12","text":"<p>Compare with 0.1.0</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Support control structures, render HTML messages (c4c7689 by Christian Meffert).</li> <li>Show sub keywords (c3d3501 by Christian Meffert).</li> <li>Show setup keyword if available (358430e by Christian Meffert).</li> </ul>"},{"location":"changelog/#010-2024-01-21","title":"0.1.0 - 2024-01-21","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Remove support for python 3.9 (f9caa43 by Christian Meffert).</li> <li>Remove support for python 3.8 (7d2d7dd by Christian Meffert).</li> <li>Show tag statistics (4808d56 by Christian Meffert).</li> <li>Initial robotmarkdown mkdocs plugin (eb7ceec by Christian Meffert).</li> </ul>"},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix failing check-docs in ci pipeline (5c98e32 by Christian Meffert).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at christian.meffert@googlemail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd python-robot-markdown\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install PDM manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install pdm\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>pdm install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>pdm run robot-markdown [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>pdm run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build robot-markdown. Thank you!</p> <p><code>python</code> | <code>pdm</code> | <code>copier-pdm</code></p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=3.1.2</code> <code>3.1.2</code> BSD-3-Clause <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&gt;=3.2.1</code> <code>3.5.1</code> BSD License <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5.3</code> <code>1.5.3</code> BSD License <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>23.2</code> BSD License <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2.2.0</code> <code>4.1.0</code> MIT License <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>robotframework</code> Generic automation framework for acceptance testing and robotic process automation (RPA) <code>&gt;=6.1.1</code> <code>6.1.1</code> Apache License 2.0 <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>aiohttp</code> Async http client/server framework (asyncio) <code>&gt;=3.7.4; sys_platform != \"win32\" or implementation_name != \"pypy\"</code> <code>3.9.1</code> Apache 2 <code>aiosignal</code> aiosignal: a list of registered asynchronous callbacks <code>&gt;=1.1.2</code> <code>1.3.1</code> Apache 2.0 <code>ansimarkup</code> Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License <code>appdirs</code> A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT <code>async-timeout</code> Timeout context manager for asyncio programs <code>&lt;5.0,&gt;=4.0; python_version &lt; \"3.11\"</code> <code>4.0.3</code> Apache 2 <code>attrs</code> Classes Without Boilerplate <code>&gt;=17.3.0</code> <code>23.1.0</code> MIT License <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.14.0</code> BSD-3-Clause <code>black</code> The uncompromising code formatter. <code>&gt;=23.9</code> <code>23.12.0</code> MIT <code>blacken-docs</code> Run Black on Python code blocks in documentation files. <code>&gt;=1.16</code> <code>1.16.0</code> MIT <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.11.17</code> MPL-2.0 <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.2</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=8.0.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>[toml]&gt;=5.2.1</code> <code>7.3.4</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>dparse</code> A parser for Python dependency files <code>&gt;=0.6.2</code> <code>0.6.3</code> MIT license <code>duty</code> A simple task runner. <code>&gt;=0.10</code> <code>1.1.0</code> ISC <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.2.0</code> MIT License <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>failprint</code> Run a command, print its output only if it fails. <code>!=1.0.0,&gt;=0.11</code> <code>1.0.2</code> ISC <code>frozenlist</code> A list-like structure which implements collections.abc.MutableSequence <code>&gt;=1.1.1</code> <code>1.4.1</code> Apache 2 <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>git-changelog</code> Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.3</code> <code>2.4.0</code> ISC <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.11</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.40</code> BSD <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.37</code> <code>0.38.1</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.6</code> BSD License <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&lt;4,&gt;=2.11</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.5.1</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;=0.3</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;=1.7</code> <code>1.7.0</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;=1.5</code> <code>1.5.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=1.2</code> <code>2.2.2</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;=9.4</code> <code>9.5.2</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.7</code> <code>0.7.2</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python]&gt;=0.23</code> <code>0.24.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.7.5</code> ISC <code>multidict</code> multidict implementation <code>&lt;7.0,&gt;=4.5</code> <code>6.0.4</code> Apache 2 <code>mypy</code> Optional static typing for Python <code>&gt;=1.5</code> <code>1.8.0</code> MIT <code>mypy-extensions</code> Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3</code> <code>1.0.0</code> MIT License <code>packaging</code> Core utilities for Python packages <code>&gt;=22.0</code> <code>23.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.9.0</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2</code> <code>4.1.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.3.0</code> MIT <code>ptyprocess</code> Run a subprocess in a pseudo terminal <code>~=0.6; sys_platform != \"win32\"</code> <code>0.7.0</code> ISC License (ISCL) <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.17.2</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.5</code> MIT License <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;=7.4</code> <code>7.4.3</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;=4.1</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.3</code> <code>3.5.0</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.10.3</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruamel-yaml</code> ruamel.yaml is a YAML parser/emitter that supports roundtrip preservation of comments, seq/map flow style, and map key order <code>&gt;=0.17.21</code> <code>0.18.5</code> MIT license <code>ruamel-yaml-clib</code> C version of reader, parser and emitter for ruamel.yaml derived from libyaml <code>&gt;=0.2.7; platform_python_implementation == \"CPython\" and python_version &lt; \"3.13\"</code> <code>0.2.8</code> MIT <code>ruff</code> An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.0</code> <code>0.1.9</code> MIT <code>safety</code> Checks installed dependencies for known vulnerabilities and licenses. <code>&gt;=2.3</code> <code>2.3.4</code> MIT license <code>semver</code> Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>&gt;=19.3</code> <code>69.0.2</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>tomli</code> A lil' TOML parser <code>&gt;=2.0; python_version &lt; '3.11'</code> <code>2.0.1</code> MIT License <code>types-markdown</code> Typing stubs for Markdown <code>&gt;=3.5</code> <code>3.5.0.3</code> Apache-2.0 license <code>types-pyyaml</code> Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.12</code> Apache-2.0 license <code>typing-extensions</code> Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.0.1; python_version &lt; \"3.11\"</code> <code>4.9.0</code> Python Software Foundation License <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.1.0</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>yarl</code> Yet another URL library <code>&lt;2.0,&gt;=1.0</code> <code>1.9.4</code> Apache-2.0"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2023 Christian Meffert\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"examples/SUMMARY.html","title":"SUMMARY","text":"<ul> <li>simple example 2</li> <li>RobotDemo</li> <li>Example with Files</li> </ul>"},{"location":"examples/Example_with_Files/suite.html","title":"Example with Files","text":"<p>Example suite with initialization file</p> <p> 1 failed, 34 passed, 0 skiped, 35 total  Executed in 195 ms on February 11, 2024 at 14:35:06  Source <code>/home/chme/git/python-robot-markdown/examples/Example_with_Files</code></p> <p>Statistics</p> Pass / Fail / Skip Total / Elapsed <code>FAIL</code> Example with Files 34 / 1 / 0 35 / 195 ms <code>PASS</code> Example with Files.For Loop 8 / 0 / 0 8 / 51 ms <code>PASS</code> Example with Files.Test With File 10 / 0 / 0 10 / 43 ms <code>PASS</code> Example with Files.Try Except Finally 12 / 0 / 0 12 / 36 ms <code>FAIL</code> Example with Files.While Loop 4 / 1 / 0 5 / 36 ms <code>FAIL</code> <code>example</code> 34 / 1 / 0 35 / 144 ms  Setup Log Do Something <code>${MESSAGE}</code> <p> <code>None</code>.Do Something  Executed in 2 ms</p> <p><pre><code>TRACE Arguments: [ ${arg}='Hello, world!' ]</code></pre></p> Log <code>Running suite setup - ${arg}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Running suite setup - Hello, world!' ]</code></pre></p> <p><pre><code>INFO Running suite setup - Hello, world!</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> Create File <code>${OUTPUT_DIR}/test.env</code> <code>content=${CONTENT}</code> <p>Creates a file with the given content and encoding.</p> <p> <code>OperatingSystem</code>.Create File  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ '/home/chme/git/python-robot-markdown/examples/Example_with_Files/test.env' | content='version=1.0.0\\nenv=QA\\nurl=https://localhost:8080/myserver&amp;#39; ]</code></pre></p> <p><pre><code>INFO Created file '/home/chme/git/python-robot-markdown/examples/Example_with_Files/test.env'.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ ${arg}='Hello, world!' ]</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Running suite setup - Hello, world!' ]</code></pre></p> <p><pre><code>INFO Running suite setup - Hello, world!</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ '/home/chme/git/python-robot-markdown/examples/Example_with_Files/test.env' | content='version=1.0.0\\nenv=QA\\nurl=https://localhost:8080/myserver&amp;#39; ]</code></pre></p> <p><pre><code>INFO Created file '/home/chme/git/python-robot-markdown/examples/Example_with_Files/test.env'.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#for-loop-pass","title":"For Loop <code>PASS</code>","text":"<p> 0 fail, 8 pass, 0 skip, 8 total  Executed in 51 ms</p>"},{"location":"examples/Example_with_Files/suite.html#loop-a-list-pass","title":"Loop a list <code>PASS</code>","text":"<p> Executed in 5 ms</p>  Test Case Log Log <code>${LIST}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ ['one', 'two', 'three'] ]</code></pre></p> <p><pre><code>INFO ['one', 'two', 'three']</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> FOR <code>${item}</code> IN [ <code>@{LIST}</code> ] <p> Executed in 2 ms</p> ITERATION <code>${item}</code> <code>=</code> <code>one</code> <p> Executed in 1 ms</p> Log <code>${item}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'one' ]</code></pre></p> <p><pre><code>INFO one</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${item}</code> <code>=</code> <code>two</code> <p> Executed in 0 ms</p> Log <code>${item}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'two' ]</code></pre></p> <p><pre><code>INFO two</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${item}</code> <code>=</code> <code>three</code> <p> Executed in 1 ms</p> Log <code>${item}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'three' ]</code></pre></p> <p><pre><code>INFO three</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> FOR <code>${item}</code> IN [ <code>one</code> <code>two</code> <code>three</code> ] <p> Executed in 2 ms</p> ITERATION <code>${item}</code> <code>=</code> <code>one</code> <p> Executed in 1 ms</p> Log <code>${item}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'one' ]</code></pre></p> <p><pre><code>INFO one</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${item}</code> <code>=</code> <code>two</code> <p> Executed in 0 ms</p> Log <code>${item}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'two' ]</code></pre></p> <p><pre><code>INFO two</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${item}</code> <code>=</code> <code>three</code> <p> Executed in 1 ms</p> Log <code>${item}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'three' ]</code></pre></p> <p><pre><code>INFO three</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ ['one', 'two', 'three'] ]</code></pre></p> <p><pre><code>INFO ['one', 'two', 'three']</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'one' ]</code></pre></p> <p><pre><code>INFO one</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'two' ]</code></pre></p> <p><pre><code>INFO two</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'three' ]</code></pre></p> <p><pre><code>INFO three</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'one' ]</code></pre></p> <p><pre><code>INFO one</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'two' ]</code></pre></p> <p><pre><code>INFO two</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'three' ]</code></pre></p> <p><pre><code>INFO three</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#loop-a-dictionary-pass","title":"Loop a dictionary <code>PASS</code>","text":"<p> Executed in 5 ms</p>  Test Case Log Log <code>${DICTIONARY}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ {'list': ['one', 'two', 'three'], 'number': 1, 'string': 'cat'} ]</code></pre></p> <p><pre><code>INFO {'string': 'cat', 'number': 1, 'list': ['one', 'two', 'three']}</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> FOR <code>${key_value_tuple}</code> IN [ <code>&amp;{DICTIONARY}</code> ] <p> Executed in 1 ms</p> ITERATION <code>${key_value_tuple}</code> <code>=</code> <code>('string', 'cat')</code> <p> Executed in 0 ms</p> Log <code>${key_value_tuple}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ ('string', 'cat') ]</code></pre></p> <p><pre><code>INFO ('string', 'cat')</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${key_value_tuple}</code> <code>=</code> <code>('number', 1)</code> <p> Executed in 1 ms</p> Log <code>${key_value_tuple}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ ('number', 1) ]</code></pre></p> <p><pre><code>INFO ('number', 1)</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${key_value_tuple}</code> <code>=</code> <code>('list', ['one', 'two', 'three'])</code> <p> Executed in 0 ms</p> Log <code>${key_value_tuple}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ ('list', ['one', 'two', 'three']) ]</code></pre></p> <p><pre><code>INFO ('list', ['one', 'two', 'three'])</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> FOR <code>${key}</code> IN [ <code>@{DICTIONARY}</code> ] <p> Executed in 1 ms</p> ITERATION <code>${key}</code> <code>=</code> <code>string</code> <p> Executed in 0 ms</p> Log <code>${key}=${DICTIONARY}[${key}]</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'string=cat' ]</code></pre></p> <p><pre><code>INFO string=cat</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${key}</code> <code>=</code> <code>number</code> <p> Executed in 1 ms</p> Log <code>${key}=${DICTIONARY}[${key}]</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'number=1' ]</code></pre></p> <p><pre><code>INFO number=1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${key}</code> <code>=</code> <code>list</code> <p> Executed in 0 ms</p> Log <code>${key}=${DICTIONARY}[${key}]</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ \"list=['one', 'two', 'three']\" ]</code></pre></p> <p><pre><code>INFO list=['one', 'two', 'three']</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ {'list': ['one', 'two', 'three'], 'number': 1, 'string': 'cat'} ]</code></pre></p> <p><pre><code>INFO {'string': 'cat', 'number': 1, 'list': ['one', 'two', 'three']}</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ ('string', 'cat') ]</code></pre></p> <p><pre><code>INFO ('string', 'cat')</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ ('number', 1) ]</code></pre></p> <p><pre><code>INFO ('number', 1)</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ ('list', ['one', 'two', 'three']) ]</code></pre></p> <p><pre><code>INFO ('list', ['one', 'two', 'three'])</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'string=cat' ]</code></pre></p> <p><pre><code>INFO string=cat</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'number=1' ]</code></pre></p> <p><pre><code>INFO number=1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ \"list=['one', 'two', 'three']\" ]</code></pre></p> <p><pre><code>INFO list=['one', 'two', 'three']</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#loop-a-range-from-0-to-end-index-pass","title":"Loop a range from 0 to end index <code>PASS</code>","text":"<p> Executed in 5 ms</p>  Test Case Log FOR <code>${index}</code> IN RANGE [ <code>10</code> ] <p> Executed in 5 ms</p> ITERATION <code>${index}</code> <code>=</code> <code>0</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>INFO 0</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>1</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 1 ]</code></pre></p> <p><pre><code>INFO 1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>2</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 2 ]</code></pre></p> <p><pre><code>INFO 2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>3</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 3 ]</code></pre></p> <p><pre><code>INFO 3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>4</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 4 ]</code></pre></p> <p><pre><code>INFO 4</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>5</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 5 ]</code></pre></p> <p><pre><code>INFO 5</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>6</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 6 ]</code></pre></p> <p><pre><code>INFO 6</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>7</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 7 ]</code></pre></p> <p><pre><code>INFO 7</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>8</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 8 ]</code></pre></p> <p><pre><code>INFO 8</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>9</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 9 ]</code></pre></p> <p><pre><code>INFO 9</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>INFO 0</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 1 ]</code></pre></p> <p><pre><code>INFO 1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 2 ]</code></pre></p> <p><pre><code>INFO 2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 3 ]</code></pre></p> <p><pre><code>INFO 3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 4 ]</code></pre></p> <p><pre><code>INFO 4</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 5 ]</code></pre></p> <p><pre><code>INFO 5</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 6 ]</code></pre></p> <p><pre><code>INFO 6</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 7 ]</code></pre></p> <p><pre><code>INFO 7</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 8 ]</code></pre></p> <p><pre><code>INFO 8</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 9 ]</code></pre></p> <p><pre><code>INFO 9</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#loop-a-range-from-start-to-end-index-pass","title":"Loop a range from start to end index <code>PASS</code>","text":"<p> Executed in 10 ms</p>  Test Case Log FOR <code>${index}</code> IN RANGE [ <code>1</code> <code>10</code> ] <p> Executed in 8 ms</p> ITERATION <code>${index}</code> <code>=</code> <code>1</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 1 ]</code></pre></p> <p><pre><code>INFO 1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>2</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 2 ]</code></pre></p> <p><pre><code>INFO 2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>3</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 3 ]</code></pre></p> <p><pre><code>INFO 3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>4</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 4 ]</code></pre></p> <p><pre><code>INFO 4</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>5</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 5 ]</code></pre></p> <p><pre><code>INFO 5</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>6</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 6 ]</code></pre></p> <p><pre><code>INFO 6</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>7</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 7 ]</code></pre></p> <p><pre><code>INFO 7</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>8</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 8 ]</code></pre></p> <p><pre><code>INFO 8</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>9</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 9 ]</code></pre></p> <p><pre><code>INFO 9</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 1 ]</code></pre></p> <p><pre><code>INFO 1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 2 ]</code></pre></p> <p><pre><code>INFO 2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 3 ]</code></pre></p> <p><pre><code>INFO 3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 4 ]</code></pre></p> <p><pre><code>INFO 4</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 5 ]</code></pre></p> <p><pre><code>INFO 5</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 6 ]</code></pre></p> <p><pre><code>INFO 6</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 7 ]</code></pre></p> <p><pre><code>INFO 7</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 8 ]</code></pre></p> <p><pre><code>INFO 8</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 9 ]</code></pre></p> <p><pre><code>INFO 9</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#loop-a-range-from-start-to-end-index-with-steps-pass","title":"Loop a range from start to end index with steps <code>PASS</code>","text":"<p> Executed in 6 ms</p>  Test Case Log FOR <code>${index}</code> IN RANGE [ <code>0</code> <code>10</code> <code>2</code> ] <p> Executed in 5 ms</p> ITERATION <code>${index}</code> <code>=</code> <code>0</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>INFO 0</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>2</code> <p> Executed in 0 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 2 ]</code></pre></p> <p><pre><code>INFO 2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>4</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 4 ]</code></pre></p> <p><pre><code>INFO 4</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>6</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 6 ]</code></pre></p> <p><pre><code>INFO 6</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${index}</code> <code>=</code> <code>8</code> <p> Executed in 1 ms</p> Log <code>${index}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 8 ]</code></pre></p> <p><pre><code>INFO 8</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>INFO 0</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 2 ]</code></pre></p> <p><pre><code>INFO 2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 4 ]</code></pre></p> <p><pre><code>INFO 4</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 6 ]</code></pre></p> <p><pre><code>INFO 6</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 8 ]</code></pre></p> <p><pre><code>INFO 8</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#nest-loops-pass","title":"Nest loops <code>PASS</code>","text":"<p> Executed in 11 ms</p>  Test Case Log <code>@{alphabets}</code> <code>=</code> Create List <code>a</code> <code>b</code> <code>c</code> <p>Returns a list containing given items.</p> <p> <code>BuiltIn</code>.Create List  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'a' | 'b' | 'c' ]</code></pre></p> <p><pre><code>TRACE Return: ['a', 'b', 'c']</code></pre></p> <p><pre><code>INFO @{alphabets} = [ a | b | c ]</code></pre></p> Log <code>${alphabets}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ ['a', 'b', 'c'] ]</code></pre></p> <p><pre><code>INFO ['a', 'b', 'c']</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <code>@{numbers}</code> <code>=</code> Create List <code>${1}</code> <code>${2}</code> <code>${3}</code> <p>Returns a list containing given items.</p> <p> <code>BuiltIn</code>.Create List  Executed in 2 ms</p> <p><pre><code>TRACE Arguments: [ 1 | 2 | 3 ]</code></pre></p> <p><pre><code>TRACE Return: [1, 2, 3]</code></pre></p> <p><pre><code>INFO @{numbers} = [ 1 | 2 | 3 ]</code></pre></p> Log <code>${numbers}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ [1, 2, 3] ]</code></pre></p> <p><pre><code>INFO [1, 2, 3]</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> FOR <code>${alphabet}</code> IN [ <code>@{alphabets}</code> ] <p> Executed in 6 ms</p> ITERATION <code>${alphabet}</code> <code>=</code> <code>a</code> <p> Executed in 2 ms</p> FOR <code>${number}</code> IN [ <code>@{numbers}</code> ] <p> Executed in 2 ms</p> ITERATION <code>${number}</code> <code>=</code> <code>1</code> <p> Executed in 1 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'a1' ]</code></pre></p> <p><pre><code>INFO a1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${number}</code> <code>=</code> <code>2</code> <p> Executed in 0 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'a2' ]</code></pre></p> <p><pre><code>INFO a2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${number}</code> <code>=</code> <code>3</code> <p> Executed in 1 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'a3' ]</code></pre></p> <p><pre><code>INFO a3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${alphabet}</code> <code>=</code> <code>b</code> <p> Executed in 2 ms</p> FOR <code>${number}</code> IN [ <code>@{numbers}</code> ] <p> Executed in 2 ms</p> ITERATION <code>${number}</code> <code>=</code> <code>1</code> <p> Executed in 1 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'b1' ]</code></pre></p> <p><pre><code>INFO b1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${number}</code> <code>=</code> <code>2</code> <p> Executed in 1 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'b2' ]</code></pre></p> <p><pre><code>INFO b2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${number}</code> <code>=</code> <code>3</code> <p> Executed in 0 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'b3' ]</code></pre></p> <p><pre><code>INFO b3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${alphabet}</code> <code>=</code> <code>c</code> <p> Executed in 2 ms</p> FOR <code>${number}</code> IN [ <code>@{numbers}</code> ] <p> Executed in 2 ms</p> ITERATION <code>${number}</code> <code>=</code> <code>1</code> <p> Executed in 0 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'c1' ]</code></pre></p> <p><pre><code>INFO c1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${number}</code> <code>=</code> <code>2</code> <p> Executed in 1 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'c2' ]</code></pre></p> <p><pre><code>INFO c2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${number}</code> <code>=</code> <code>3</code> <p> Executed in 0 ms</p> Log <code>${alphabet}${number}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'c3' ]</code></pre></p> <p><pre><code>INFO c3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'a' | 'b' | 'c' ]</code></pre></p> <p><pre><code>TRACE Return: ['a', 'b', 'c']</code></pre></p> <p><pre><code>INFO @{alphabets} = [ a | b | c ]</code></pre></p> <p><pre><code>TRACE Arguments: [ ['a', 'b', 'c'] ]</code></pre></p> <p><pre><code>INFO ['a', 'b', 'c']</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 1 | 2 | 3 ]</code></pre></p> <p><pre><code>TRACE Return: [1, 2, 3]</code></pre></p> <p><pre><code>INFO @{numbers} = [ 1 | 2 | 3 ]</code></pre></p> <p><pre><code>TRACE Arguments: [ [1, 2, 3] ]</code></pre></p> <p><pre><code>INFO [1, 2, 3]</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'a1' ]</code></pre></p> <p><pre><code>INFO a1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'a2' ]</code></pre></p> <p><pre><code>INFO a2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'a3' ]</code></pre></p> <p><pre><code>INFO a3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'b1' ]</code></pre></p> <p><pre><code>INFO b1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'b2' ]</code></pre></p> <p><pre><code>INFO b2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'b3' ]</code></pre></p> <p><pre><code>INFO b3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'c1' ]</code></pre></p> <p><pre><code>INFO c1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'c2' ]</code></pre></p> <p><pre><code>INFO c2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'c3' ]</code></pre></p> <p><pre><code>INFO c3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#exit-a-loop-on-condition-pass","title":"Exit a loop on condition <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log FOR <code>${i}</code> IN RANGE [ <code>5</code> ] <p> Executed in 2 ms</p> ITERATION <code>${i}</code> <code>=</code> <code>0</code> <p> Executed in 1 ms</p> IF <code>${i} == 2</code> <p> Executed in 1 ms</p> BREAK <p> Executed in 0 ms</p> Log <code>${i}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>INFO 0</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${i}</code> <code>=</code> <code>1</code> <p> Executed in 1 ms</p> IF <code>${i} == 2</code> <p> Executed in 0 ms</p> BREAK <p> Executed in 0 ms</p> Log <code>${i}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 1 ]</code></pre></p> <p><pre><code>INFO 1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${i}</code> <code>=</code> <code>2</code> <p> Executed in 0 ms</p> IF <code>${i} == 2</code> <p> Executed in 0 ms</p> BREAK <p> Executed in 0 ms</p> Log <code>${i}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>INFO 0</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 1 ]</code></pre></p> <p><pre><code>INFO 1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#continue-a-loop-from-the-next-iteration-on-condition-pass","title":"Continue a loop from the next iteration on condition <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log FOR <code>${i}</code> IN RANGE [ <code>3</code> ] <p> Executed in 2 ms</p> ITERATION <code>${i}</code> <code>=</code> <code>0</code> <p> Executed in 1 ms</p> IF <code>${i} == 1</code> <p> Executed in 1 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>${i}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>INFO 0</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${i}</code> <code>=</code> <code>1</code> <p> Executed in 0 ms</p> IF <code>${i} == 1</code> <p> Executed in 0 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>${i}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> ITERATION <code>${i}</code> <code>=</code> <code>2</code> <p> Executed in 0 ms</p> IF <code>${i} == 1</code> <p> Executed in 0 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>${i}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 2 ]</code></pre></p> <p><pre><code>INFO 2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>INFO 0</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 2 ]</code></pre></p> <p><pre><code>INFO 2</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#test-with-file-pass","title":"Test With File <code>PASS</code>","text":"<p>A simple test suite to show case how files created in the output folder are included in robot-markdown generated documentation.</p> <p> 0 fail, 10 pass, 0 skip, 10 total  Executed in 43 ms</p>"},{"location":"examples/Example_with_Files/suite.html#test-with-file-pass_1","title":"Test with file <code>PASS</code>","text":"<p>File created in output folder in a Test Case</p> <p> Executed in 2 ms</p>  Test Case Log Create File <code>${OUTPUT_DIR}/myfiles/test_with_file.json</code> <code>content=${JSON_CONTENT}</code> <p>Creates a file with the given content and encoding.</p> <p> <code>OperatingSystem</code>.Create File  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ '/home/chme/git/python-robot-markdown/examples/Example_with_Files/myfiles/test_with_file.json' | content='{\\n\"a\": \"b\"\\n}' ]</code></pre></p> <p><pre><code>INFO Created file '/home/chme/git/python-robot-markdown/examples/Example_with_Files/myfiles/test_with_file.json'.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ '/home/chme/git/python-robot-markdown/examples/Example_with_Files/myfiles/test_with_file.json' | content='{\\n\"a\": \"b\"\\n}' ]</code></pre></p> <p><pre><code>INFO Created file '/home/chme/git/python-robot-markdown/examples/Example_with_Files/myfiles/test_with_file.json'.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#file-in-sub-keyword-pass","title":"File in sub keyword <code>PASS</code>","text":"<p>File created in a sub keyword</p> <p> Executed in 3 ms</p>  Test Case Log Create File In Output Folder <p> <code>None</code>.Create File In Output Folder  Executed in 2 ms</p> <p><pre><code>TRACE Arguments: [ ${filename}='mytestfile.txt' | ${content}='Lorem ipsum' ]</code></pre></p> Create File <code>${OUTPUT_DIR}/${filename}</code> <code>content=${content}</code> <p>Creates a file with the given content and encoding.</p> <p> <code>OperatingSystem</code>.Create File  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ '/home/chme/git/python-robot-markdown/examples/Example_with_Files/mytestfile.txt' | content='Lorem ipsum' ]</code></pre></p> <p><pre><code>INFO Created file '/home/chme/git/python-robot-markdown/examples/Example_with_Files/mytestfile.txt'.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ ${filename}='mytestfile.txt' | ${content}='Lorem ipsum' ]</code></pre></p> <p><pre><code>TRACE Arguments: [ '/home/chme/git/python-robot-markdown/examples/Example_with_Files/mytestfile.txt' | content='Lorem ipsum' ]</code></pre></p> <p><pre><code>INFO Created file '/home/chme/git/python-robot-markdown/examples/Example_with_Files/mytestfile.txt'.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#use-if-construct-in-robot-framework-pass","title":"Use IF construct in Robot Framework <code>PASS</code>","text":"<p> Executed in 8 ms</p>  Test Case Log IF <code>${True}</code> <p> Executed in 0 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>${False}</code> <p> Executed in 1 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> IF <code>\"cat\" == \"cat\"</code> <p> Executed in 0 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>\"cat\" != \"dog\"</code> <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>\"cat\" == \"dog\"</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> IF <code>\"cat\" == \"cat\" and \"dog\" == \"dog\"</code> <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>\"cat\" == \"cat\" and \"dog\" == \"cat\"</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> IF <code>1 == 1</code> <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>2 &lt; 1</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> IF <code>2 &lt;= 2</code> <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>len(\"cat\") == 3</code> <p> Executed in 0 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>(1 == 1 and 2 == 2) and 3 == 3</code> <p> Executed in 1 ms</p> Log <code>This line IS executed since the expressions evaluate to True.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed since the expressions evaluate to True.' ]</code></pre></p> <p><pre><code>INFO This line IS executed since the expressions evaluate to True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>(1 == 2 or 3 == 4) or 3 == 3</code> <p> Executed in 1 ms</p> Log <code>This line IS executed since one of the expressions evaluates to True.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed since one of the expressions evaluates to True.' ]</code></pre></p> <p><pre><code>INFO This line IS executed since one of the expressions evaluates to True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed since the expressions evaluate to True.' ]</code></pre></p> <p><pre><code>INFO This line IS executed since the expressions evaluate to True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed since one of the expressions evaluates to True.' ]</code></pre></p> <p><pre><code>INFO This line IS executed since one of the expressions evaluates to True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#use-inline-if-construct-in-robot-framework-pass","title":"Use inline IF construct in Robot Framework <code>PASS</code>","text":"<p> Executed in 1 ms</p>  Test Case Log IF <code>\"cat\" == \"cat\"</code> <p> Executed in 1 ms</p> Log <code>This is logged.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'This is logged.' ]</code></pre></p> <p><pre><code>INFO This is logged.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ELSE <p> Executed in 0 ms</p> Log <code>This is NOT logged.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This is logged.' ]</code></pre></p> <p><pre><code>INFO This is logged.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#use-if-else-construct-in-robot-framework-pass","title":"Use IF / ELSE construct in Robot Framework <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log IF <code>1 == 1</code> <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ELSE <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> IF <code>1 == 2</code> <p> Executed in 1 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> ELSE <p> Executed in 0 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#use-if-else-if-construct-in-robot-framework-pass","title":"Use IF / ELSE IF construct in Robot Framework <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log IF <code>1 == 1</code> <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ELSE IF <code>2 == 2</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> IF <code>1 == 2</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> ELSE IF <code>2 == 2</code> <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> IF <code>1 == 2</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> ELSE IF <code>2 == 3</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#use-if-else-if-else-construct-in-robot-framework-pass","title":"Use IF / ELSE IF / ELSE construct in Robot Framework <code>PASS</code>","text":"<p> Executed in 5 ms</p>  Test Case Log IF <code>1 == 1</code> <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ELSE IF <code>2 == 2</code> <p> Executed in 1 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> ELSE <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> IF <code>1 == 2</code> <p> Executed in 1 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> ELSE IF <code>2 == 2</code> <p> Executed in 0 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ELSE <p> Executed in 1 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> IF <code>1 == 2</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> ELSE IF <code>2 == 3</code> <p> Executed in 0 ms</p> Log <code>This line is NOT executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> ELSE <p> Executed in 1 ms</p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#use-run-keyword-if-in-robot-framework-pass","title":"Use Run Keyword If in Robot Framework <code>PASS</code>","text":"<p> Executed in 2 ms</p>  Test Case Log Run Keyword If <code>${True}</code> <code>Log</code> <code>This line IS executed.</code> <p>Runs the given keyword with the given arguments, if <code>condition</code> is true.</p> <p> <code>BuiltIn</code>.Run Keyword If  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ True | 'Log' | 'This line IS executed.' ]</code></pre></p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> Run Keyword If <code>${False}</code> <code>Log</code> <code>This line is NOT executed.</code> <p>Runs the given keyword with the given arguments, if <code>condition</code> is true.</p> <p> <code>BuiltIn</code>.Run Keyword If  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ False | 'Log' | 'This line is NOT executed.' ]</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ True | 'Log' | 'This line IS executed.' ]</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ False | 'Log' | 'This line is NOT executed.' ]</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#use-run-keyword-unless-in-robot-framework-pass","title":"Use Run Keyword Unless in Robot Framework <code>PASS</code>","text":"<p> Executed in 2 ms</p>  Test Case Log Run Keyword Unless <code>${True}</code> <code>Log</code> <code>This line is NOT executed.</code> <p>DEPRECATED since RF 5.0. Use Native IF/ELSE or <code>Run Keyword If</code> instead.</p> <p> <code>BuiltIn</code>.Run Keyword Unless  Executed in 0 ms</p> <p><pre><code>WARN Keyword 'BuiltIn.Run Keyword Unless' is deprecated. </code></pre></p> <p><pre><code>TRACE Arguments: [ True | 'Log' | 'This line is NOT executed.' ]</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> Run Keyword Unless <code>${False}</code> <code>Log</code> <code>This line IS executed.</code> <p>DEPRECATED since RF 5.0. Use Native IF/ELSE or <code>Run Keyword If</code> instead.</p> <p> <code>BuiltIn</code>.Run Keyword Unless  Executed in 1 ms</p> <p><pre><code>WARN Keyword 'BuiltIn.Run Keyword Unless' is deprecated. </code></pre></p> <p><pre><code>TRACE Arguments: [ False | 'Log' | 'This line IS executed.' ]</code></pre></p> Log <code>This line IS executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>WARN Keyword 'BuiltIn.Run Keyword Unless' is deprecated. </code></pre></p> <p><pre><code>TRACE Arguments: [ True | 'Log' | 'This line is NOT executed.' ]</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>WARN Keyword 'BuiltIn.Run Keyword Unless' is deprecated. </code></pre></p> <p><pre><code>TRACE Arguments: [ False | 'Log' | 'This line IS executed.' ]</code></pre></p> <p><pre><code>TRACE Arguments: [ 'This line IS executed.' ]</code></pre></p> <p><pre><code>INFO This line IS executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#execute-a-for-loop-only-three-times-pass","title":"Execute a for loop only three times <code>PASS</code>","text":"<p> Executed in 9 ms</p>  Test Case Log FOR <code>${robot}</code> IN [ <code>@{ROBOTS}</code> ] <p> Executed in 8 ms</p> ITERATION <code>${robot}</code> <code>=</code> <code>Bender</code> <p> Executed in 5 ms</p> IF <code>$robot == 'Terminator'</code> <p> Executed in 4 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>${robot}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Bender' ]</code></pre></p> <p><pre><code>INFO Bender</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${robot}</code> <code>=</code> <code>Johnny5</code> <p> Executed in 1 ms</p> IF <code>$robot == 'Terminator'</code> <p> Executed in 0 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>${robot}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Johnny5' ]</code></pre></p> <p><pre><code>INFO Johnny5</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <code>${robot}</code> <code>=</code> <code>Terminator</code> <p> Executed in 1 ms</p> IF <code>$robot == 'Terminator'</code> <p> Executed in 0 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>${robot}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> ITERATION <code>${robot}</code> <code>=</code> <code>Robocop</code> <p> Executed in 1 ms</p> IF <code>$robot == 'Terminator'</code> <p> Executed in 0 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>${robot}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Robocop' ]</code></pre></p> <p><pre><code>INFO Robocop</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Bender' ]</code></pre></p> <p><pre><code>INFO Bender</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Johnny5' ]</code></pre></p> <p><pre><code>INFO Johnny5</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Robocop' ]</code></pre></p> <p><pre><code>INFO Robocop</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-finally-pass","title":"Try Except Finally <code>PASS</code>","text":"<p>Robot Framework 5 syntax examples.</p> <p> 0 fail, 12 pass, 0 skip, 12 total  Executed in 36 ms</p>"},{"location":"examples/Example_with_Files/suite.html#try-except-catch-any-exception-pass","title":"TRY / EXCEPT: Catch any exception <code>PASS</code>","text":"<p> Executed in 1 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Fail <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [  ]</code></pre></p> <p><pre><code>FAIL AssertionError</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError</code></pre></p> EXCEPT <p> Executed in 0 ms</p> Log <code>EXCEPT with no arguments catches any exception.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'EXCEPT with no arguments catches any exception.' ]</code></pre></p> <p><pre><code>INFO EXCEPT with no arguments catches any exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [  ]</code></pre></p> <p><pre><code>FAIL AssertionError</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError</code></pre></p> <p><pre><code>TRACE Arguments: [ 'EXCEPT with no arguments catches any exception.' ]</code></pre></p> <p><pre><code>INFO EXCEPT with no arguments catches any exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-catch-an-exception-by-exact-message-pass","title":"TRY / EXCEPT: Catch an exception by exact message <code>PASS</code>","text":"<p> Executed in 2 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Fail <code>Error message</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Error message' ]</code></pre></p> <p><pre><code>FAIL Error message</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Error message</code></pre></p> EXCEPT <code>Error message</code> <p> Executed in 0 ms</p> Log <code>Catches only \"Error message\" exceptions.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Catches only \"Error message\" exceptions.' ]</code></pre></p> <p><pre><code>INFO Catches only \"Error message\" exceptions.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> Log <code>Enables error-specific exception handling.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Enables error-specific exception handling.' ]</code></pre></p> <p><pre><code>INFO Enables error-specific exception handling.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Error message' ]</code></pre></p> <p><pre><code>FAIL Error message</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Error message</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Catches only \"Error message\" exceptions.' ]</code></pre></p> <p><pre><code>INFO Catches only \"Error message\" exceptions.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Enables error-specific exception handling.' ]</code></pre></p> <p><pre><code>INFO Enables error-specific exception handling.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-multiple-except-statements-pass","title":"TRY / EXCEPT: Multiple EXCEPT statements <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log TRY <p> Executed in 2 ms</p> Fail <code>Error message</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Error message' ]</code></pre></p> <p><pre><code>FAIL Error message</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Error message</code></pre></p> EXCEPT <code>Another error message</code> <p> Executed in 0 ms</p> Log <code>Catches only \"Another error message\" exceptions.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> EXCEPT <code>Error message</code> <p> Executed in 1 ms</p> Log <code>Catches the \"Error message\" exception.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Catches the \"Error message\" exception.' ]</code></pre></p> <p><pre><code>INFO Catches the \"Error message\" exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Error message' ]</code></pre></p> <p><pre><code>FAIL Error message</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Error message</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Catches the \"Error message\" exception.' ]</code></pre></p> <p><pre><code>INFO Catches the \"Error message\" exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-multiple-messages-in-except-statement-pass","title":"TRY / EXCEPT: Multiple messages in EXCEPT statement <code>PASS</code>","text":"<p> Executed in 1 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Fail <code>CCC</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'CCC' ]</code></pre></p> <p><pre><code>FAIL CCC</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: CCC</code></pre></p> EXCEPT <code>AAA</code> <code>BBB</code> <code>CCC</code> <p> Executed in 0 ms</p> Log <code>Catches any \"AAA\", \"BBB\", or \"CCC\" exception.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Catches any \"AAA\", \"BBB\", or \"CCC\" exception.' ]</code></pre></p> <p><pre><code>INFO Catches any \"AAA\", \"BBB\", or \"CCC\" exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'CCC' ]</code></pre></p> <p><pre><code>FAIL CCC</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: CCC</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Catches any \"AAA\", \"BBB\", or \"CCC\" exception.' ]</code></pre></p> <p><pre><code>INFO Catches any \"AAA\", \"BBB\", or \"CCC\" exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-catch-a-specific-exception-or-an-unexpected-exception-pass","title":"TRY / EXCEPT: Catch a specific exception, or an unexpected exception <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Fail <code>Error message</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Error message' ]</code></pre></p> <p><pre><code>FAIL Error message</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Error message</code></pre></p> EXCEPT <code>Another message</code> <p> Executed in 0 ms</p> Log <code>Catches only \"Another message\" exceptions.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> EXCEPT <p> Executed in 1 ms</p> Log <code>Catches any exception.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Catches any exception.' ]</code></pre></p> <p><pre><code>INFO Catches any exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> Log <code>Useful for handling unexpected exceptions.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Useful for handling unexpected exceptions.' ]</code></pre></p> <p><pre><code>INFO Useful for handling unexpected exceptions.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Error message' ]</code></pre></p> <p><pre><code>FAIL Error message</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Error message</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Catches any exception.' ]</code></pre></p> <p><pre><code>INFO Catches any exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Useful for handling unexpected exceptions.' ]</code></pre></p> <p><pre><code>INFO Useful for handling unexpected exceptions.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-catch-exceptions-where-the-message-starts-with-pass","title":"TRY / EXCEPT: Catch exceptions where the message starts with <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Fail <code>A long error message with lots of details</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'A long error message with lots of details' ]</code></pre></p> <p><pre><code>FAIL A long error message with lots of details</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: A long error message with lots of details</code></pre></p> EXCEPT <code>A long error message</code> <code>type=start</code> <p> Executed in 0 ms</p> Log <code>Matches the start of an error message.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Matches the start of an error message.' ]</code></pre></p> <p><pre><code>INFO Matches the start of an error message.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'A long error message with lots of details' ]</code></pre></p> <p><pre><code>FAIL A long error message with lots of details</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: A long error message with lots of details</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Matches the start of an error message.' ]</code></pre></p> <p><pre><code>INFO Matches the start of an error message.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-capture-the-error-message-pass","title":"TRY / EXCEPT: Capture the error message <code>PASS</code>","text":"<p> Executed in 2 ms</p>  Test Case Log TRY <p> Executed in 0 ms</p> Fail <code>Goodbye, world!</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Goodbye, world!' ]</code></pre></p> <p><pre><code>FAIL Goodbye, world!</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Goodbye, world!</code></pre></p> EXCEPT <p> Executed in 1 ms</p> Log <code>${error_message}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Goodbye, world!' ]</code></pre></p> <p><pre><code>INFO Goodbye, world!</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Goodbye, world!' ]</code></pre></p> <p><pre><code>FAIL Goodbye, world!</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Goodbye, world!</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Goodbye, world!' ]</code></pre></p> <p><pre><code>INFO Goodbye, world!</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-using-else-when-no-exceptions-occured-pass","title":"TRY / EXCEPT: Using ELSE when no exceptions occured <code>PASS</code>","text":"<p> Executed in 2 ms</p>  Test Case Log TRY <p> Executed in 0 ms</p> Log <code>All good!</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'All good!' ]</code></pre></p> <p><pre><code>INFO All good!</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> EXCEPT <code>Error message</code> <p> Executed in 0 ms</p> Log <code>An error occured.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> ELSE <p> Executed in 1 ms</p> Log <code>No error occured.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'No error occured.' ]</code></pre></p> <p><pre><code>INFO No error occured.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'All good!' ]</code></pre></p> <p><pre><code>INFO All good!</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'No error occured.' ]</code></pre></p> <p><pre><code>INFO No error occured.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-finally-always-execute-code-no-matter-if-exceptions-or-not-pass","title":"TRY / EXCEPT / FINALLY: Always execute code no matter if exceptions or not <code>PASS</code>","text":"<p> Executed in 4 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Log <code>All good!</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'All good!' ]</code></pre></p> <p><pre><code>INFO All good!</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> FINALLY <p> Executed in 1 ms</p> Log <code>FINALLY is always executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'FINALLY is always executed.' ]</code></pre></p> <p><pre><code>INFO FINALLY is always executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> TRY <p> Executed in 1 ms</p> Fail <code>Catastrophic failure!</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Catastrophic failure!' ]</code></pre></p> <p><pre><code>FAIL Catastrophic failure!</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Catastrophic failure!</code></pre></p> EXCEPT <p> Executed in 0 ms</p> Log <code>Catches any exception.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Catches any exception.' ]</code></pre></p> <p><pre><code>INFO Catches any exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> FINALLY <p> Executed in 1 ms</p> Log <code>FINALLY is always executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'FINALLY is always executed.' ]</code></pre></p> <p><pre><code>INFO FINALLY is always executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'All good!' ]</code></pre></p> <p><pre><code>INFO All good!</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'FINALLY is always executed.' ]</code></pre></p> <p><pre><code>INFO FINALLY is always executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Catastrophic failure!' ]</code></pre></p> <p><pre><code>FAIL Catastrophic failure!</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Catastrophic failure!</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Catches any exception.' ]</code></pre></p> <p><pre><code>INFO Catches any exception.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'FINALLY is always executed.' ]</code></pre></p> <p><pre><code>INFO FINALLY is always executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-else-finally-all-together-pass","title":"TRY / EXCEPT / ELSE / FINALLY: All together! <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Fail <code>Error message</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Error message' ]</code></pre></p> <p><pre><code>FAIL Error message</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Error message</code></pre></p> EXCEPT <p> Executed in 0 ms</p> Log <code>Executed if any exception occurs.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed if any exception occurs.' ]</code></pre></p> <p><pre><code>INFO Executed if any exception occurs.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ELSE <p> Executed in 1 ms</p> Log <code>Executed if no exceptions occur.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> FINALLY <p> Executed in 0 ms</p> Log <code>FINALLY is always executed.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'FINALLY is always executed.' ]</code></pre></p> <p><pre><code>INFO FINALLY is always executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Error message' ]</code></pre></p> <p><pre><code>FAIL Error message</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: Error message</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed if any exception occurs.' ]</code></pre></p> <p><pre><code>INFO Executed if any exception occurs.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'FINALLY is always executed.' ]</code></pre></p> <p><pre><code>INFO FINALLY is always executed.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-glob-pattern-matching-pass","title":"TRY / EXCEPT: Glob pattern matching <code>PASS</code>","text":"<p> Executed in 2 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Fail <code>My error: 99 occured</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'My error: 99 occured' ]</code></pre></p> <p><pre><code>FAIL My error: 99 occured</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: My error: 99 occured</code></pre></p> EXCEPT <code>My error: *</code> <code>type=glob</code> <p> Executed in 1 ms</p> Log <code>Catches by glob pattern matching.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Catches by glob pattern matching.' ]</code></pre></p> <p><pre><code>INFO Catches by glob pattern matching.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'My error: 99 occured' ]</code></pre></p> <p><pre><code>FAIL My error: 99 occured</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: My error: 99 occured</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Catches by glob pattern matching.' ]</code></pre></p> <p><pre><code>INFO Catches by glob pattern matching.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#try-except-regular-expression-matching-pass","title":"TRY / EXCEPT: Regular expression matching <code>PASS</code>","text":"<p> Executed in 1 ms</p>  Test Case Log TRY <p> Executed in 1 ms</p> Fail <code>error 99 occured</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'error 99 occured' ]</code></pre></p> <p><pre><code>FAIL error 99 occured</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: error 99 occured</code></pre></p> EXCEPT <code>[Ee]rror \\\\d+ occured</code> <code>type=regexp</code> <p> Executed in 0 ms</p> Log <code>Catches by regular expression pattern matching.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Catches by regular expression pattern matching.' ]</code></pre></p> <p><pre><code>INFO Catches by regular expression pattern matching.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'error 99 occured' ]</code></pre></p> <p><pre><code>FAIL error 99 occured</code></pre></p> <p><pre><code>DEBUG Traceback (most recent call last):\n      None\n    AssertionError: error 99 occured</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Catches by regular expression pattern matching.' ]</code></pre></p> <p><pre><code>INFO Catches by regular expression pattern matching.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#while-loop-fail","title":"While Loop <code>FAIL</code>","text":"<p> 1 fail, 4 pass, 0 skip, 5 total  Executed in 36 ms</p>"},{"location":"examples/Example_with_Files/suite.html#while-a-simple-while-loop-using-the-default-loop-limit-fail","title":"WHILE: A simple while loop using the default loop limit <code>FAIL</code>","text":"<p> Executed in 9 ms</p> <p>WHILE loop was aborted because it did not finish within the limit of 10 iterations. Use the 'limit' argument to increase or remove the limit if needed.</p>  Test Case Log WHILE <code>True</code> <code>limit=10</code> <p> Executed in 9 ms</p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 2 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 0 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 0 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#while-loop-while-the-given-limit-is-hit-pass","title":"WHILE: Loop while the given limit is hit <code>PASS</code>","text":"<p> Executed in 6 ms</p>  Test Case Log TRY <p> Executed in 5 ms</p> WHILE <code>True</code> <code>limit=10</code> <p> Executed in 5 ms</p> ITERATION <p> Executed in 0 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 0 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 0 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 0 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 0 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed until the given loop limit (10) is hit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> EXCEPT <code>WHILE loop was aborted</code> <code>type=start</code> <p> Executed in 0 ms</p> Log <code>The loop did not finish within the limit.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'The loop did not finish within the limit.' ]</code></pre></p> <p><pre><code>INFO The loop did not finish within the limit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed until the given loop limit (10) is hit.' ]</code></pre></p> <p><pre><code>INFO Executed until the given loop limit (10) is hit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 'The loop did not finish within the limit.' ]</code></pre></p> <p><pre><code>INFO The loop did not finish within the limit.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#while-loop-while-condition-evaluates-to-true-or-the-default-loop-limit-is-hit-pass","title":"WHILE: Loop while condition evaluates to True or the default loop limit is hit <code>PASS</code>","text":"<p> Executed in 8 ms</p>  Test Case Log <code>${x}</code> <code>=</code> Set Variable <code>${0}</code> <p>Returns the given values which can then be assigned to a variables.</p> <p> <code>BuiltIn</code>.Set Variable  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>TRACE Return: 0</code></pre></p> <p><pre><code>INFO ${x} = 0</code></pre></p> WHILE <code>${x} &lt; 3</code> <p> Executed in 6 ms</p> ITERATION <p> Executed in 3 ms</p> Log <code>Executed as long as the condition is True.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed as long as the condition is True.' ]</code></pre></p> <p><pre><code>INFO Executed as long as the condition is True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <code>${x}</code> <code>=</code> Evaluate <code>${x} + 1</code> <p>Evaluates the given expression in Python and returns the result.</p> <p> <code>BuiltIn</code>.Evaluate  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ '0 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 1</code></pre></p> <p><pre><code>INFO ${x} = 1</code></pre></p> ITERATION <p> Executed in 2 ms</p> Log <code>Executed as long as the condition is True.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed as long as the condition is True.' ]</code></pre></p> <p><pre><code>INFO Executed as long as the condition is True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <code>${x}</code> <code>=</code> Evaluate <code>${x} + 1</code> <p>Evaluates the given expression in Python and returns the result.</p> <p> <code>BuiltIn</code>.Evaluate  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ '1 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 2</code></pre></p> <p><pre><code>INFO ${x} = 2</code></pre></p> ITERATION <p> Executed in 1 ms</p> Log <code>Executed as long as the condition is True.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'Executed as long as the condition is True.' ]</code></pre></p> <p><pre><code>INFO Executed as long as the condition is True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <code>${x}</code> <code>=</code> Evaluate <code>${x} + 1</code> <p>Evaluates the given expression in Python and returns the result.</p> <p> <code>BuiltIn</code>.Evaluate  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ '2 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 3</code></pre></p> <p><pre><code>INFO ${x} = 3</code></pre></p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>TRACE Return: 0</code></pre></p> <p><pre><code>INFO ${x} = 0</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed as long as the condition is True.' ]</code></pre></p> <p><pre><code>INFO Executed as long as the condition is True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ '0 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 1</code></pre></p> <p><pre><code>INFO ${x} = 1</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed as long as the condition is True.' ]</code></pre></p> <p><pre><code>INFO Executed as long as the condition is True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ '1 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 2</code></pre></p> <p><pre><code>INFO ${x} = 2</code></pre></p> <p><pre><code>TRACE Arguments: [ 'Executed as long as the condition is True.' ]</code></pre></p> <p><pre><code>INFO Executed as long as the condition is True.</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ '2 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 3</code></pre></p> <p><pre><code>INFO ${x} = 3</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#while-skip-a-loop-iteration-with-continue-pass","title":"WHILE: Skip a loop iteration with CONTINUE <code>PASS</code>","text":"<p> Executed in 7 ms</p>  Test Case Log <code>${x}</code> <code>=</code> Set Variable <code>${0}</code> <p>Returns the given values which can then be assigned to a variables.</p> <p> <code>BuiltIn</code>.Set Variable  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>TRACE Return: 0</code></pre></p> <p><pre><code>INFO ${x} = 0</code></pre></p> WHILE <code>${x} &lt; 3</code> <p> Executed in 5 ms</p> ITERATION <p> Executed in 2 ms</p> <code>${x}</code> <code>=</code> Evaluate <code>${x} + 1</code> <p>Evaluates the given expression in Python and returns the result.</p> <p> <code>BuiltIn</code>.Evaluate  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ '0 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 1</code></pre></p> <p><pre><code>INFO ${x} = 1</code></pre></p> IF <code>${x} == 2</code> <p> Executed in 0 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>x = ${x}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'x = 1' ]</code></pre></p> <p><pre><code>INFO x = 1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> ITERATION <p> Executed in 1 ms</p> <code>${x}</code> <code>=</code> Evaluate <code>${x} + 1</code> <p>Evaluates the given expression in Python and returns the result.</p> <p> <code>BuiltIn</code>.Evaluate  Executed in 1 ms</p> <p><pre><code>TRACE Arguments: [ '1 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 2</code></pre></p> <p><pre><code>INFO ${x} = 2</code></pre></p> IF <code>${x} == 2</code> <p> Executed in 0 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>x = ${x}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> ITERATION <p> Executed in 1 ms</p> <code>${x}</code> <code>=</code> Evaluate <code>${x} + 1</code> <p>Evaluates the given expression in Python and returns the result.</p> <p> <code>BuiltIn</code>.Evaluate  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ '2 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 3</code></pre></p> <p><pre><code>INFO ${x} = 3</code></pre></p> IF <code>${x} == 2</code> <p> Executed in 0 ms</p> CONTINUE <p> Executed in 0 ms</p> Log <code>x = ${x}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>TRACE Arguments: [ 'x = 3' ]</code></pre></p> <p><pre><code>INFO x = 3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ 0 ]</code></pre></p> <p><pre><code>TRACE Return: 0</code></pre></p> <p><pre><code>INFO ${x} = 0</code></pre></p> <p><pre><code>TRACE Arguments: [ '0 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 1</code></pre></p> <p><pre><code>INFO ${x} = 1</code></pre></p> <p><pre><code>TRACE Arguments: [ 'x = 1' ]</code></pre></p> <p><pre><code>INFO x = 1</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p> <p><pre><code>TRACE Arguments: [ '1 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 2</code></pre></p> <p><pre><code>INFO ${x} = 2</code></pre></p> <p><pre><code>TRACE Arguments: [ '2 + 1' ]</code></pre></p> <p><pre><code>TRACE Return: 3</code></pre></p> <p><pre><code>INFO ${x} = 3</code></pre></p> <p><pre><code>TRACE Arguments: [ 'x = 3' ]</code></pre></p> <p><pre><code>INFO x = 3</code></pre></p> <p><pre><code>TRACE Return: None</code></pre></p>"},{"location":"examples/Example_with_Files/suite.html#while-exit-loop-with-break-pass","title":"WHILE: Exit loop with BREAK <code>PASS</code>","text":"<p> Executed in 1 ms</p>  Test Case Log WHILE <code>True</code> <p> Executed in 0 ms</p> ITERATION <p> Executed in 0 ms</p> BREAK <p> Executed in 0 ms</p> Log <code>This will not be logged.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html","title":"RobotDemo","text":"<p> 1 failed, 11 passed, 0 skiped, 12 total  Executed in 70 ms on January 07, 2024 at 07:51:13  Source <code>/home/chme/git/python-robot-markdown/examples/RobotDemo</code></p> <p>Statistics</p> Pass / Fail / Skip Total / Elapsed <code>FAIL</code> RobotDemo 11 / 1 / 0 12 / 70 ms <code>FAIL</code> RobotDemo.Data Driven 5 / 1 / 0 6 / 29 ms <code>PASS</code> RobotDemo.Gherkin 1 / 0 / 0 1 / 8 ms <code>PASS</code> RobotDemo.Keyword Driven 5 / 0 / 0 5 / 12 ms"},{"location":"examples/RobotDemo/suite.html#data-driven-fail","title":"Data Driven <code>FAIL</code>","text":"<p>Example test cases using the data-driven testing approach.</p> <p>The data-driven style works well when you need to repeat the same workflow multiple times.</p> <p>Tests use <code>Calculate</code> keyword created in this file, that in turn uses keywords in <code>CalculatorLibrary.py</code>. An exception is the last test that has a custom template keyword.</p> <p>Notice that one of these tests fails on purpose to show how failures look like.</p> <p> 1 fail, 5 pass, 0 skip, 6 total  Executed in 29 ms</p>"},{"location":"examples/RobotDemo/suite.html#addition-pass","title":"Addition <code>PASS</code>","text":"<p> Executed in 4 ms</p>  Test Case Log Calculate <code>12 + 2 + 2</code> <code>16</code> <p> <code>None</code>.Calculate  Executed in 1 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 1 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p> Calculate <code>2 + -3</code> <code>-1</code> <p> <code>None</code>.Calculate  Executed in 2 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 0 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 1 ms</p>"},{"location":"examples/RobotDemo/suite.html#subtraction-pass","title":"Subtraction <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log Calculate <code>12 - 2 - 2</code> <code>8</code> <p> <code>None</code>.Calculate  Executed in 1 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 1 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p> Calculate <code>2 - -3</code> <code>5</code> <p> <code>None</code>.Calculate  Executed in 1 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 1 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html#multiplication-pass","title":"Multiplication <code>PASS</code>","text":"<p> Executed in 3 ms</p>  Test Case Log Calculate <code>12 * 2 * 2</code> <code>48</code> <p> <code>None</code>.Calculate  Executed in 1 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 1 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p> Calculate <code>2 * -3</code> <code>-6</code> <p> <code>None</code>.Calculate  Executed in 1 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 1 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html#division-pass","title":"Division <code>PASS</code>","text":"<p> Executed in 6 ms</p>  Test Case Log Calculate <code>12 / 2 / 2</code> <code>3</code> <p> <code>None</code>.Calculate  Executed in 1 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 1 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p> Calculate <code>2 / -3</code> <code>-1</code> <p> <code>None</code>.Calculate  Executed in 4 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 2 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html#failing-fail","title":"Failing <code>FAIL</code>","text":"<p> Executed in 3 ms</p> <p>2 != 3</p>  Test Case Log Calculate <code>1 + 1</code> <code>3</code> <p> <code>None</code>.Calculate  Executed in 2 ms</p> Push Buttons <code>C${expression}=</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 1 ms</p> Result Should Be <code>${expected}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p> <p><pre><code>FAIL 2 != 3</code></pre></p> <p><pre><code>FAIL 2 != 3</code></pre></p>"},{"location":"examples/RobotDemo/suite.html#calculation-error-pass","title":"Calculation error <code>PASS</code>","text":"<p> Executed in 8 ms</p>  Test Case Log Calculation should fail <code>kekkonen</code> <code>Invalid button 'k'.</code> <p> <code>None</code>.Calculation should fail  Executed in 2 ms</p> <code>${error}</code> <code>=</code> Should Cause Error <code>C${expression}=</code> <p>Verifies that calculating the given <code>expression</code> causes an error.</p> <p> <code>CalculatorLibrary</code>.Should Cause Error  Executed in 1 ms</p> <p><pre><code>INFO ${error} = Invalid button 'k'.</code></pre></p> Should Be Equal <code>${expected}</code> <code>${error}</code> <p>Fails if the given objects are unequal.</p> <p> <code>BuiltIn</code>.Should Be Equal  Executed in 0 ms</p> Calculation should fail <code>${EMPTY}</code> <code>Invalid expression.</code> <p> <code>None</code>.Calculation should fail  Executed in 2 ms</p> <code>${error}</code> <code>=</code> Should Cause Error <code>C${expression}=</code> <p>Verifies that calculating the given <code>expression</code> causes an error.</p> <p> <code>CalculatorLibrary</code>.Should Cause Error  Executed in 0 ms</p> <p><pre><code>INFO ${error} = Invalid expression.</code></pre></p> Should Be Equal <code>${expected}</code> <code>${error}</code> <p>Fails if the given objects are unequal.</p> <p> <code>BuiltIn</code>.Should Be Equal  Executed in 0 ms</p> Calculation should fail <code>1 / 0</code> <code>Division by zero.</code> <p> <code>None</code>.Calculation should fail  Executed in 1 ms</p> <code>${error}</code> <code>=</code> Should Cause Error <code>C${expression}=</code> <p>Verifies that calculating the given <code>expression</code> causes an error.</p> <p> <code>CalculatorLibrary</code>.Should Cause Error  Executed in 0 ms</p> <p><pre><code>INFO ${error} = Division by zero.</code></pre></p> Should Be Equal <code>${expected}</code> <code>${error}</code> <p>Fails if the given objects are unequal.</p> <p> <code>BuiltIn</code>.Should Be Equal  Executed in 0 ms</p> <p><pre><code>INFO ${error} = Invalid button 'k'.</code></pre></p> <p><pre><code>INFO ${error} = Invalid expression.</code></pre></p> <p><pre><code>INFO ${error} = Division by zero.</code></pre></p>"},{"location":"examples/RobotDemo/suite.html#gherkin-pass","title":"Gherkin <code>PASS</code>","text":"<p>Example test case using the gherkin syntax.</p> <p>This test has a workflow similar to the keyword-driven examples. The difference is that the keywords use higher abstraction level and their arguments are embedded into the keyword names.</p> <p>This kind of gherkin syntax has been made popular by [http://cukes.info|Cucumber]. It works well especially when tests act as examples that need to be easily understood also by the business people.</p> <p> 0 fail, 1 pass, 0 skip, 1 total  Executed in 8 ms</p>"},{"location":"examples/RobotDemo/suite.html#addition-pass_1","title":"Addition <code>PASS</code>","text":"<p> Executed in 4 ms</p>  Test Case Log Given calculator has been cleared <p> <code>None</code>.Given calculator has been cleared  Executed in 1 ms</p> Push Button <code>C</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 1 ms</p> When user types \"1 + 1\" <p> <code>None</code>.When user types \"1 + 1\"  Executed in 1 ms</p> Push Buttons <code>${expression}</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 1 ms</p> and user pushes equals <p> <code>None</code>.and user pushes equals  Executed in 0 ms</p> Push Button <code>=</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Then result is \"2\" <p> <code>None</code>.Then result is \"2\"  Executed in 0 ms</p> Result Should Be <code>${result}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html#keyword-driven-pass","title":"Keyword Driven <code>PASS</code>","text":"<p>Example test cases using the keyword-driven testing approach.</p> <p>All tests contain a workflow constructed from keywords in <code>CalculatorLibrary.py</code>. Creating new tests or editing existing is easy even for people without programming skills.</p> <p>The keyword-driven appoach works well for normal test automation, but the gherkin style might be even better if also business people need to understand tests. If the same workflow needs to repeated multiple times, it is best to use to the data-driven approach.</p> <p> 0 fail, 5 pass, 0 skip, 5 total  Executed in 12 ms</p>"},{"location":"examples/RobotDemo/suite.html#push-button-pass","title":"Push button <code>PASS</code>","text":"<p> Executed in 1 ms</p>  Test Case Log Push Button <code>1</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Result Should Be <code>1</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html#push-multiple-buttons-pass","title":"Push multiple buttons <code>PASS</code>","text":"<p> Executed in 1 ms</p>  Test Case Log Push Button <code>1</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Push Button <code>2</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Result Should Be <code>12</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html#simple-calculation-pass","title":"Simple calculation <code>PASS</code>","text":"<p> Executed in 2 ms</p>  Test Case Log Push Button <code>1</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Push Button <code>+</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 1 ms</p> Push Button <code>2</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Push Button <code>=</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Result Should Be <code>3</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html#longer-calculation-pass","title":"Longer calculation <code>PASS</code>","text":"<p> Executed in 1 ms</p>  Test Case Log Push Buttons <code>5 + 4 - 3 * 2 / 1 =</code> <p>Pushes the specified <code>buttons</code>.</p> <p> <code>CalculatorLibrary</code>.Push Buttons  Executed in 0 ms</p> Result Should Be <code>3</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 0 ms</p>"},{"location":"examples/RobotDemo/suite.html#clear-pass","title":"Clear <code>PASS</code>","text":"<p> Executed in 2 ms</p>  Test Case Log Push Button <code>1</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Push Button <code>C</code> <p>Pushes the specified <code>button</code>.</p> <p> <code>CalculatorLibrary</code>.Push Button  Executed in 0 ms</p> Result Should Be <code>${EMPTY}</code> <p>Verifies that the current result is <code>expected</code>.</p> <p> <code>CalculatorLibrary</code>.Result Should Be  Executed in 1 ms</p>"},{"location":"examples/simple_example_2/suite.html","title":"Simple Example 2","text":"<p> 2 failed, 2 passed, 0 skiped, 4 total  Executed in 63 ms on December 31, 2023 at 09:43:12  Source <code>/home/chme/git/python-robot-markdown/examples/simple_example_2</code></p> <p>Statistics</p> Pass / Fail / Skip Total / Elapsed <code>FAIL</code> Simple Example 2 2 / 2 / 0 4 / 63 ms <code>FAIL</code> Simple Example 2.Test 2 / 2 / 0 4 / 43 ms"},{"location":"examples/simple_example_2/suite.html#test-fail","title":"Test <code>FAIL</code>","text":"<p>This .robot file is a suite</p> <p>Keywords are imported from the resource file</p> <p> 2 fail, 2 pass, 0 skip, 4 total  Executed in 43 ms</p>"},{"location":"examples/simple_example_2/suite.html#simple-test-case-pass","title":"Simple Test Case <code>PASS</code>","text":"<p>Shows some assertion keywords</p> <p> Executed in 3 ms</p>  Test Case Log Should Be Title Case <code>Robot Framework</code> <p>Fails if given <code>string</code> is not title.</p> <p> <code>String</code>.Should Be Title Case  Executed in 0 ms</p> Should Be Equal <code>Text123</code> <code>Text123</code> <p>Fails if the given objects are unequal.</p> <p> <code>BuiltIn</code>.Should Be Equal  Executed in 0 ms</p> Should Be True <code>5 + 5 == 10</code> <p>Fails if the given condition is not true.</p> <p> <code>BuiltIn</code>.Should Be True  Executed in 0 ms</p>"},{"location":"examples/simple_example_2/suite.html#test-with-keywords-pass","title":"Test with Keywords <code>PASS</code>","text":"<p> Executed in 7 ms</p>  Test Case Log Store Text <code>Hail Our Robot</code> <p> <code>keywords</code>.Store Text  Executed in 3 ms</p> Log <code>The text \"${text}\" will be store in the variable \\${stored_text}.</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 1 ms</p> <p><pre><code>INFO The text \"Hail Our Robot\" will be store in the variable ${stored_text}.</code></pre></p> Set Suite Variable <code>${stored_text}</code> <code>${text}</code> <p>Makes a variable available everywhere within the scope of the current suite.</p> <p> <code>BuiltIn</code>.Set Suite Variable  Executed in 2 ms</p> <p><pre><code>INFO ${stored_text} = Hail Our Robot</code></pre></p> Add Text To Stored Text <code>Overlords!</code> <p> <code>keywords</code>.Add Text To Stored Text  Executed in 2 ms</p> <code>${full_text}</code> <code>=</code> Set Variable <code>${stored_text} ${text}</code> <p>Returns the given values which can then be assigned to a variables.</p> <p> <code>BuiltIn</code>.Set Variable  Executed in 0 ms</p> <p><pre><code>INFO ${full_text} = Hail Our Robot Overlords!</code></pre></p> Log <code>The resulting text is: ${full_text}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>INFO The resulting text is: Hail Our Robot Overlords!</code></pre></p> Set Suite Variable <code>${stored_text}</code> <code>${full_text}</code> <p>Makes a variable available everywhere within the scope of the current suite.</p> <p> <code>BuiltIn</code>.Set Suite Variable  Executed in 1 ms</p> <p><pre><code>INFO ${stored_text} = Hail Our Robot Overlords!</code></pre></p> Verify Stored Text Length <code>25</code> <p> <code>keywords</code>.Verify Stored Text Length  Executed in 0 ms</p> Length Should Be <code>${stored_text}</code> <code>${expected_length}</code> <p>Verifies that the length of the given item is correct.</p> <p> <code>BuiltIn</code>.Length Should Be  Executed in 0 ms</p> <p><pre><code>INFO Length is 25</code></pre></p> <code>${current_text}</code> <code>=</code> Get Stored Text <p> <code>keywords</code>.Get Stored Text  Executed in 1 ms</p> <p><pre><code>INFO ${current_text} = Hail Our Robot Overlords!</code></pre></p> Should Be Equal <code>${current_text}</code> <code>Hail Our Robot Overlords!</code> <p>Fails if the given objects are unequal.</p> <p> <code>BuiltIn</code>.Should Be Equal  Executed in 0 ms</p> <p><pre><code>INFO The text \"Hail Our Robot\" will be store in the variable ${stored_text}.</code></pre></p> <p><pre><code>INFO ${stored_text} = Hail Our Robot</code></pre></p> <p><pre><code>INFO ${full_text} = Hail Our Robot Overlords!</code></pre></p> <p><pre><code>INFO The resulting text is: Hail Our Robot Overlords!</code></pre></p> <p><pre><code>INFO ${stored_text} = Hail Our Robot Overlords!</code></pre></p> <p><pre><code>INFO Length is 25</code></pre></p> <p><pre><code>INFO ${current_text} = Hail Our Robot Overlords!</code></pre></p>"},{"location":"examples/simple_example_2/suite.html#test-for-the-year-2022-fail","title":"Test for the year 2022 <code>FAIL</code>","text":"<p>Tests if it is still 2022...</p> <p> Executed in 2 ms</p> <p>2023 != 2022</p>  Test Case Log <code>${date}</code> <code>=</code> Get Current Date <code>result_format=datetime</code> <p>Returns current local or UTC time with an optional increment.</p> <p> <code>DateTime</code>.Get Current Date  Executed in 0 ms</p> <p><pre><code>INFO ${date} = 2023-12-31 09:43:12.397985</code></pre></p> Log <code>${date}</code> <p>Logs the given message with the given level.</p> <p> <code>BuiltIn</code>.Log  Executed in 0 ms</p> <p><pre><code>INFO 2023-12-31 09:43:12.397985</code></pre></p> Should Be Equal As Strings <code>${date.year}</code> <code>2022</code> <p>Fails if objects are unequal after converting them to strings.</p> <p> <code>BuiltIn</code>.Should Be Equal As Strings  Executed in 0 ms</p> <p><pre><code>INFO Argument types are:\n    &lt;class 'int'&gt;\n    &lt;class 'str'&gt;</code></pre></p> <p><pre><code>FAIL 2023 != 2022</code></pre></p> <p><pre><code>INFO ${date} = 2023-12-31 09:43:12.397985</code></pre></p> <p><pre><code>INFO 2023-12-31 09:43:12.397985</code></pre></p> <p><pre><code>INFO Argument types are:\n    &lt;class 'int'&gt;\n    &lt;class 'str'&gt;</code></pre></p> <p><pre><code>FAIL 2023 != 2022</code></pre></p>"},{"location":"examples/simple_example_2/suite.html#test-case-that-fails-fail","title":"Test Case that fails <code>FAIL</code>","text":"<p> Executed in 8 ms</p> <p>Sorry. But that was the wrong answer... Bye Bye...</p>  Test Case Log Check Correct Greeting <code>Hail Our Robot Overlords!</code> <p> <code>keywords</code>.Check Correct Greeting  Executed in 5 ms</p> IF <code>$greeting == 'Hail Our Robot Overlords!'</code> <p> Executed in 4 ms</p> Log To Console <code>\\nYou may proceed...</code> <p>Logs the given message to the console.</p> <p> <code>BuiltIn</code>.Log To Console  Executed in 0 ms</p> ELSE <p> Executed in 0 ms</p> Fail <code>Sorry. But that was the wrong answer... Bye Bye...</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 0 ms</p> Check Correct Greeting <code>Hello World!</code> <p> <code>keywords</code>.Check Correct Greeting  Executed in 1 ms</p> IF <code>$greeting == 'Hail Our Robot Overlords!'</code> <p> Executed in 0 ms</p> Log To Console <code>\\nYou may proceed...</code> <p>Logs the given message to the console.</p> <p> <code>BuiltIn</code>.Log To Console  Executed in 0 ms</p> ELSE <p> Executed in 1 ms</p> Fail <code>Sorry. But that was the wrong answer... Bye Bye...</code> <p>Fails the test with the given message and optionally alters its tags.</p> <p> <code>BuiltIn</code>.Fail  Executed in 1 ms</p> <p><pre><code>FAIL Sorry. But that was the wrong answer... Bye Bye...</code></pre></p> <p><pre><code>FAIL Sorry. But that was the wrong answer... Bye Bye...</code></pre></p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> robot_markdown<ul> <li> cli</li> <li> debug</li> <li> plugin</li> <li> renderer</li> <li> summary</li> </ul> </li> </ul>"},{"location":"reference/robot_markdown/","title":"Index","text":""},{"location":"reference/robot_markdown/#robot_markdown","title":"robot_markdown","text":"<p>robot-markdown package.</p> <p>Convert RobotFramework output XML to markdown</p>"},{"location":"reference/robot_markdown/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":""},{"location":"reference/robot_markdown/cli/#robot_markdown.cli","title":"cli","text":"<p>Module that contains the command line application.</p>"},{"location":"reference/robot_markdown/cli/#robot_markdown.cli.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; argparse.ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>         \u2013          <p>An argparse parser.</p> </li> </ul> Source code in <code>src/robot_markdown/cli.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"Return the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    parser = argparse.ArgumentParser(prog=\"robot-markdown\")\n    parser.add_argument(\"-v\", \"--version\", action=\"version\", version=f\"%(prog)s {debug.get_version()}\")\n    parser.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n    parser.add_argument(\"file\", help=\"RobotFramework output.xml file.\")\n    return parser\n</code></pre>"},{"location":"reference/robot_markdown/cli/#robot_markdown.cli.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>robot-markdown</code> or <code>python -m robot_markdown</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>             (<code>list[str] | None</code>, default:                 <code>None</code> )         \u2013          <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>         \u2013          <p>An exit code.</p> </li> </ul> Source code in <code>src/robot_markdown/cli.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `robot-markdown` or `python -m robot_markdown`.\n\n    Parameters:\n        args: Arguments passed from the command line.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    parser = get_parser()\n    opts = parser.parse_args(args=args)\n    print(opts)\n    renderer = Renderer()\n    print(renderer.render(opts.file))\n\n    return 0\n</code></pre>"},{"location":"reference/robot_markdown/debug/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> debug","text":""},{"location":"reference/robot_markdown/debug/#robot_markdown.debug","title":"debug","text":"<p>Debugging utilities.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<p>Dataclass to store environment information.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Package","title":"Package  <code>dataclass</code>","text":"<p>Dataclass describing a Python package.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<p>Dataclass describing an environment variable.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>         \u2013          <p>Environment information.</p> </li> </ul> Source code in <code>src/robot_markdown/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"robot-markdown\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"ROBOT_MARKDOWN\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'robot-markdown') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>             (<code>str</code>, default:                 <code>'robot-markdown'</code> )         \u2013          <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A version number.</p> </li> </ul> Source code in <code>src/robot_markdown/debug.py</code> <pre><code>def get_version(dist: str = \"robot-markdown\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/robot_markdown/debug/#robot_markdown.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/robot_markdown/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version}\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/robot_markdown/plugin/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plugin","text":""},{"location":"reference/robot_markdown/plugin/#robot_markdown.plugin","title":"plugin","text":"<p>MkDocs plugin to integrate RobotFramework test reports.</p>"},{"location":"reference/robot_markdown/plugin/#robot_markdown.plugin.RobotConfig","title":"RobotConfig","text":"<p>             Bases: <code>Config</code></p> <p>Data class for mkdocs plugin config.</p>"},{"location":"reference/robot_markdown/plugin/#robot_markdown.plugin.RobotPlugin","title":"RobotPlugin","text":"<p>             Bases: <code>BasePlugin[RobotConfig]</code></p> <p>mkdocs plugin to integrate RobotFramework test execution results.</p>"},{"location":"reference/robot_markdown/plugin/#robot_markdown.plugin.RobotPlugin.on_files","title":"on_files","text":"<pre><code>on_files(files: Files, *, config: MkDocsConfig) -&gt; Files\n</code></pre> <p>Handle the on_files event hook.</p> Source code in <code>src/robot_markdown/plugin.py</code> <pre><code>def on_files(self, files: Files, *, config: MkDocsConfig) -&gt; Files:\n    \"\"\"Handle the on_files event hook.\"\"\"\n    self._cachedirs = []\n\n    renderer = Renderer()\n    for report_config in self.config.reports:\n        if report_config.cache_dir:\n            self._process(renderer, report_config, report_config.cache_dir, files, config)\n        else:\n            cachedir = tempfile.TemporaryDirectory(prefix=\"mkdocs_robot_\")\n            self._cachedirs.append(cachedir)\n            self._process(renderer, report_config, cachedir.name, files, config)\n\n    return files\n</code></pre>"},{"location":"reference/robot_markdown/plugin/#robot_markdown.plugin.RobotPlugin.on_post_build","title":"on_post_build","text":"<pre><code>on_post_build(config: MkDocsConfig) -&gt; None\n</code></pre> <p>Handle the on_post_build event hook.</p> Source code in <code>src/robot_markdown/plugin.py</code> <pre><code>@event_priority(-100)\ndef on_post_build(self, config: MkDocsConfig) -&gt; None:  # noqa: ARG002 (inherited method)\n    \"\"\"Handle the on_post_build event hook.\"\"\"\n    for cachedir in self._cachedirs:\n        cachedir.cleanup()\n</code></pre>"},{"location":"reference/robot_markdown/renderer/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> renderer","text":""},{"location":"reference/robot_markdown/renderer/#robot_markdown.renderer","title":"renderer","text":"<p>Module for converting RobotFramework result XML file (output.xml) to markdown.</p>"},{"location":"reference/robot_markdown/renderer/#robot_markdown.renderer.Renderer","title":"Renderer","text":"<pre><code>Renderer(theme: str = 'mkdocs-material')\n</code></pre> <p>Renderer class responsible for converting RobotFramework result files to markdown.</p> <p>Parameters:</p> <ul> <li> <code>theme</code>             (<code>str</code>, default:                 <code>'mkdocs-material'</code> )         \u2013          <p>The theme (Jinja templates) to be used</p> </li> </ul> Source code in <code>src/robot_markdown/renderer.py</code> <pre><code>def __init__(self, theme: str = \"mkdocs-material\") -&gt; None:\n    \"\"\"Creates a new renderer that will the given theme.\n\n    Parameters:\n        theme: The theme (Jinja templates) to be used\n    \"\"\"\n    self.theme = theme\n    self.jinjaEnv = Environment(\n        loader=PackageLoader(\"robot_markdown\", f\"templates/{theme}\"),\n        autoescape=select_autoescape(),\n        trim_blocks=True,\n    )\n    self.template = self.jinjaEnv.get_template(\"testreport.md.jinja\")\n</code></pre>"},{"location":"reference/robot_markdown/renderer/#robot_markdown.renderer.Renderer.render","title":"render","text":"<pre><code>render(robot_result_file: str) -&gt; str\n</code></pre> <p>Convert a RobotFramework result XML to markdown.</p> <p>Read and parse the given file and convert it to markdown using Jinja templates.</p> <p>Parameters:</p> <ul> <li> <code>robot_result_file</code>             (<code>str</code>)         \u2013          <p>A RobotFramework test execution result file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A markdown string.</p> </li> </ul> Source code in <code>src/robot_markdown/renderer.py</code> <pre><code>def render(self, robot_result_file: str) -&gt; str:\n    \"\"\"Convert a RobotFramework result XML to markdown.\n\n    Read and parse the given file and convert it to markdown using Jinja templates.\n\n    Parameters:\n        robot_result_file: A RobotFramework test execution result file.\n\n    Returns:\n        A markdown string.\n    \"\"\"\n    output_dir = os.path.abspath(os.path.dirname(robot_result_file)) + \"/\"\n    result = ExecutionResult(robot_result_file)\n    return self.template.render(robot=result, output_dir=output_dir)\n</code></pre>"},{"location":"reference/robot_markdown/summary/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> summary","text":""},{"location":"reference/robot_markdown/summary/#robot_markdown.summary","title":"summary","text":"<p>Helper functions to create a SUMMARY.md file that can be used with the mkdocs literate-nav plugin.</p>"},{"location":"reference/robot_markdown/summary/#robot_markdown.summary.create_summary","title":"create_summary","text":"<pre><code>create_summary(items: list) -&gt; str\n</code></pre> <p>Create a markdown summary for a list of file paths.</p> <p>The generated markdown can be used to create a SUMMARY.md file for the literate-nav mkdocs-plugin</p> <p>Parameters:</p> <ul> <li> <code>items</code>             (<code>list</code>)         \u2013          <p>A list of paths</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>         \u2013          <p>A markdown string.</p> </li> </ul> Source code in <code>src/robot_markdown/summary.py</code> <pre><code>def create_summary(items: list) -&gt; str:\n    \"\"\"Create a markdown summary for a list of file paths.\n\n    The generated markdown can be used to create a SUMMARY.md file\n    for the literate-nav mkdocs-plugin\n\n    Parameters:\n        items: A list of paths\n\n    Returns:\n        A markdown string.\n    \"\"\"\n    summary_dict, _ = _create_dirtree(items)\n    return _to_markdown(summary_dict)\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}